// <auto-generated />
using System;
using CarRental.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace CarRental.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20230217124521_ALL")]
    partial class ALL
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.13")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder, 1L, 1);

            modelBuilder.Entity("CarRental.Areas.Identity.Data.Customer", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("first_name")
                        .IsRequired()
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("last_name")
                        .IsRequired()
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers", (string)null);

                    b.HasData(
                        new
                        {
                            Id = "8e445865-a24d-4543-a6c6-9443d048cdb9",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "47ff2718-210d-419a-86c2-00740d104944",
                            Email = "admin@admin.admin",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            NormalizedEmail = "ADMIN@ADMIN.ADMIN",
                            NormalizedUserName = "ADMIN@ADMIN.ADMIN",
                            PasswordHash = "AQAAAAEAACcQAAAAEAP9+Wt+DSSz9arCCEjAPRGGBytjWr9AoFnFZpPVbaS2nnUXbSLgA4wIbS+1xahVIg==",
                            PhoneNumber = "123456789",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "803b7e37-f340-4b31-adf0-6b83c938f426",
                            TwoFactorEnabled = false,
                            UserName = "admin@admin.admin",
                            first_name = "Admin",
                            last_name = "Admin"
                        },
                        new
                        {
                            Id = "8e445865-a24d-4543-a6c6-9443d048cdb8",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "c1fc4525-0e44-45f5-a245-2cb69d606aca",
                            Email = "user@user.user",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            NormalizedEmail = "USER@USER.USER",
                            NormalizedUserName = "USER@USER.USER",
                            PasswordHash = "AQAAAAEAACcQAAAAEJDUrRiithSJ7uczrUvFAv2jvQrPhdvEHo4rA8wLI6XCf5UKbNCuVG79NyrNsxeu6g==",
                            PhoneNumber = "987654321",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "f812beef-6db5-4d31-a835-17fb8dbb2c2a",
                            TwoFactorEnabled = false,
                            UserName = "user@user.user",
                            first_name = "User",
                            last_name = "User"
                        });
                });

            modelBuilder.Entity("CarRental.Models.Cars", b =>
                {
                    b.Property<int>("id_car")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("id_car"), 1L, 1);

                    b.Property<int?>("Localisations")
                        .HasColumnType("int");

                    b.Property<int?>("Types")
                        .HasColumnType("int");

                    b.Property<string>("make")
                        .IsRequired()
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("model")
                        .IsRequired()
                        .HasColumnType("nvarchar(50)");

                    b.Property<int>("power")
                        .HasColumnType("int");

                    b.Property<decimal>("price_per_day")
                        .HasColumnType("decimal(10,2)");

                    b.Property<string>("vin")
                        .IsRequired()
                        .HasColumnType("char(17)");

                    b.HasKey("id_car");

                    b.HasIndex("Localisations");

                    b.HasIndex("Types");

                    b.ToTable("cars");

                    b.HasData(
                        new
                        {
                            id_car = 1,
                            Localisations = 1,
                            Types = 1,
                            make = "Mercedes",
                            model = "S500",
                            power = 300,
                            price_per_day = 500m,
                            vin = "4T1BF12B3VU142754"
                        },
                        new
                        {
                            id_car = 2,
                            Localisations = 1,
                            Types = 2,
                            make = "Tesla",
                            model = "Roadster",
                            power = 700,
                            price_per_day = 700m,
                            vin = "JH4KA8270RC000976"
                        },
                        new
                        {
                            id_car = 3,
                            Localisations = 1,
                            Types = 1,
                            make = "Mercedes",
                            model = "190",
                            power = 120,
                            price_per_day = 200m,
                            vin = "1FTRW14W84KC76110"
                        },
                        new
                        {
                            id_car = 4,
                            Localisations = 2,
                            Types = 3,
                            make = "BMW",
                            model = "X3",
                            power = 200,
                            price_per_day = 300m,
                            vin = "1FTJW36F2TEA03179"
                        },
                        new
                        {
                            id_car = 5,
                            Localisations = 2,
                            Types = 4,
                            make = "Ford",
                            model = "Mustang",
                            power = 400,
                            price_per_day = 450m,
                            vin = "JH4DC4450RS002529"
                        });
                });

            modelBuilder.Entity("CarRental.Models.Localisations", b =>
                {
                    b.Property<int>("id_localisation")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("id_localisation"), 1L, 1);

                    b.Property<string>("city")
                        .IsRequired()
                        .HasColumnType("nvarchar(50)");

                    b.Property<int>("number")
                        .HasColumnType("int");

                    b.Property<string>("street")
                        .IsRequired()
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("id_localisation");

                    b.ToTable("localisations");

                    b.HasData(
                        new
                        {
                            id_localisation = 1,
                            city = "Kraków",
                            number = 1,
                            street = "Filipa"
                        },
                        new
                        {
                            id_localisation = 2,
                            city = "Warszawa",
                            number = 23,
                            street = "Długa"
                        });
                });

            modelBuilder.Entity("CarRental.Models.Payments", b =>
                {
                    b.Property<int>("id_payment")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("id_payment"), 1L, 1);

                    b.Property<decimal>("amount")
                        .HasColumnType("decimal(10,2)");

                    b.Property<DateTime?>("payment_date")
                        .HasColumnType("date");

                    b.HasKey("id_payment");

                    b.ToTable("payments");
                });

            modelBuilder.Entity("CarRental.Models.Rentals", b =>
                {
                    b.Property<int>("id_rental")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("id_rental"), 1L, 1);

                    b.Property<int>("Cars")
                        .HasColumnType("int");

                    b.Property<string>("Customer")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("Payments")
                        .HasColumnType("int");

                    b.Property<DateTime>("date_from")
                        .HasColumnType("date");

                    b.Property<DateTime>("date_to")
                        .HasColumnType("date");

                    b.HasKey("id_rental");

                    b.HasIndex("Cars");

                    b.HasIndex("Customer");

                    b.HasIndex("Payments");

                    b.ToTable("rentals");
                });

            modelBuilder.Entity("CarRental.Models.Types", b =>
                {
                    b.Property<int>("id_type")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("id_type"), 1L, 1);

                    b.Property<string>("type")
                        .IsRequired()
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("id_type");

                    b.ToTable("types");

                    b.HasData(
                        new
                        {
                            id_type = 1,
                            type = "Sedan"
                        },
                        new
                        {
                            id_type = 2,
                            type = "Sports"
                        },
                        new
                        {
                            id_type = 3,
                            type = "Suv"
                        },
                        new
                        {
                            id_type = 4,
                            type = "Cupe"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles", (string)null);

                    b.HasData(
                        new
                        {
                            Id = "2c5e174e-3b0e-446f-86af-483d56fd7210",
                            ConcurrencyStamp = "76d58b54-d7a3-4171-8a9f-cb318d4dee66",
                            Name = "Admin",
                            NormalizedName = "ADMIN"
                        },
                        new
                        {
                            Id = "2c5e174e-3b0e-446f-86af-483d56fd7211",
                            ConcurrencyStamp = "5a011fbb-ec1a-40d1-9fb3-bac4f4f6260c",
                            Name = "User",
                            NormalizedName = "USER"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("ProviderKey")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);

                    b.HasData(
                        new
                        {
                            UserId = "8e445865-a24d-4543-a6c6-9443d048cdb9",
                            RoleId = "2c5e174e-3b0e-446f-86af-483d56fd7210"
                        },
                        new
                        {
                            UserId = "8e445865-a24d-4543-a6c6-9443d048cdb8",
                            RoleId = "2c5e174e-3b0e-446f-86af-483d56fd7211"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("Name")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("CarRental.Models.Cars", b =>
                {
                    b.HasOne("CarRental.Models.Localisations", "localisation")
                        .WithMany()
                        .HasForeignKey("Localisations");

                    b.HasOne("CarRental.Models.Types", "type")
                        .WithMany()
                        .HasForeignKey("Types");

                    b.Navigation("localisation");

                    b.Navigation("type");
                });

            modelBuilder.Entity("CarRental.Models.Rentals", b =>
                {
                    b.HasOne("CarRental.Models.Cars", "car")
                        .WithMany()
                        .HasForeignKey("Cars")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CarRental.Areas.Identity.Data.Customer", "customer")
                        .WithMany()
                        .HasForeignKey("Customer")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CarRental.Models.Payments", "payment")
                        .WithMany()
                        .HasForeignKey("Payments")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("car");

                    b.Navigation("customer");

                    b.Navigation("payment");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("CarRental.Areas.Identity.Data.Customer", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("CarRental.Areas.Identity.Data.Customer", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CarRental.Areas.Identity.Data.Customer", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("CarRental.Areas.Identity.Data.Customer", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
